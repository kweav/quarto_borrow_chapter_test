[
  {
    "objectID": "git_actions.html",
    "href": "git_actions.html",
    "title": "Git Actions",
    "section": "",
    "text": "We have set up several checks for website content edits.\nWhen you create a pull request, you will see something like this if everything is successful. You can click on the preview of website here link to see a preview. Please note that some features may not be possible to see in the preview. For example, icons may only show up as a box."
  },
  {
    "objectID": "git_actions.html#rendering-action",
    "href": "git_actions.html#rendering-action",
    "title": "Git Actions",
    "section": "Rendering Action",
    "text": "Rendering Action\nIf the rendering action fails, you will see something like this:\n\n\n\n\n\n\n\n\n\nIf you click on where it says Details on the far right, you will be taken to more information about what may have gone wrong.\n\n\n\n\n\n\n\n\n\nFor example, we can see that an R object was not found in one of the files. You could identify which file by scrolling up."
  },
  {
    "objectID": "git_actions.html#spelling-and-style-action",
    "href": "git_actions.html#spelling-and-style-action",
    "title": "Git Actions",
    "section": "Spelling and Style Action",
    "text": "Spelling and Style Action\nYou may find that you have spelling errors if you get the following message from your pull request (PR):\n\n\n\n\n\n\n\n\n\nIf this happens, click the Download the errors here. link. This will take you to a table with words that the check thought were misspelled, as well as what file they occurred in and the lines in that file.\nAdd words that are not actually misspelled to the dictionary.txt file located in the resources directory. It’s a good idea to try to keep this in alphabetical order.\nFor words that are indeed misspelled, fix the errors and push your changes to your pull request.\nYou should then see that your pull request has a different message that tells you that you have no spelling errors."
  },
  {
    "objectID": "git_actions.html#url-check",
    "href": "git_actions.html#url-check",
    "title": "Git Actions",
    "section": "URL Check",
    "text": "URL Check\nYou may find that you have broken URLs. If so, you will get this message when you create a Pull Request.\n\n\n\n\n\n\n\n\n\nYou can click on the Download the errors here link to see a document with a list of broken URLs and what files they are located in, like this:\n\n\n\n\n\n\n\n\n\nHere we can see that there are two URLs that are broken in the git_actions.Rmd file."
  },
  {
    "objectID": "git_actions.html#completing-a-pull-request",
    "href": "git_actions.html#completing-a-pull-request",
    "title": "Git Actions",
    "section": "Completing a Pull Request",
    "text": "Completing a Pull Request\nOnce all the Git Action checks pass, you can merge your pull request to your main branch for your website.\n\n\n\n\n\n\n\n\n\nIf you are only working on this yourself without others to review your pull request, you can click the Merge without waiting for requirements to be met box, so that you can click the Merge pull request button."
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup",
    "section": "",
    "text": "Getting started\nCreate your repository by clicking on the Use this Template button at OTTR_Template_Website repository\n\nYou’ll need to make your repository public.\n\n\nSet your GH_PAT\nTo enable the GitHub actions, your repository needs to be setup in a specific way.\nFor OTTR GitHub actions to run, they need to have credentials through a personal access token.\n\nSet up your own personal access token following these instructions - but create a classic token. Keep this personal access token handy for the next step. When you get to the permissions page, check the box that says repo and select all that is underneath that header. No other permissions are necessary.\n\n\n\nClick here for more detailed instructions. The instructions for this step may change with updates to GitHub.\n\nFirst, go to your username settings, by clicking on your user icon (upper right corner) and scrolling down to settings.\n\n\n\n\n\n\n\n\n\nNext, scroll all the way down on the far right menu to “Developer Settings”.\n\n\n\n\n\n\n\n\n\nThen select “Personal Access Tokens” and “Tokens (classic)”\n\n\n\n\n\n\n\n\n\nThen click “Generate new token” and confirm that you want classic.\n\n\n\n\n\n\n\n\n\nFinally, add a name select all the repo scopes and scroll down to the green button to generate the token. Copy this somewhere safe to then paste into your repository settings.\n\n\n\n\n\n\n\n\n\n\n\nIn your new OTTR_Template_Website derived repository, go to Settings &gt; Secrets and variables &gt; Actions. Click New Repository Secret.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the window opened, name this new secret GH_PAT and paste the personal access token in the box below. (Note that the name GH_PAT is specific to how OTTR works and other secret names cannot be used and for OTTR to still work).\nClick the green button to add the secret.\n\n\n\n\n\n\n\n\n\n\n\nAllow GitHub Actions\nGo to the settings menu for your repository that you created from the template. This should be located at the top of GitHub on the right side.\nScroll down to the “Actions” button and click it, then click “General”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nScroll down to the workflow permissions section and select “Read and write permissions”, then click “Allow GitHub actions to create and approve pull requests.\nFinally, click “save”.\n\n\n\n\n\n\n\n\n\n\n\nProtect branches\nAlthough this isn’t entirely required, its strongly recommended that you use these settings to protect your main branches.\nClick on settings in the far upper right corner:\n\n\n\n\n\n\n\n\n\nClick on branches:\n\n\n\n\n\n\n\n\n\nClick the add rule button.\n\n\n\n\n\n\n\n\n\nType “main” as the branch name pattern:\n\n\n\n\n\n\n\n\n\nClick on the following boxes to require pull requests before merging:\n\n\n\n\n\n\n\n\n\nNote that if you have admin privileges on this repository, you will likely still be able to override these branch protections so use caution when git pushing!"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact Us",
    "section": "",
    "text": "If you have questions please contact:\n\nCarrie Wright (cwrigh60@jhu.edu)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Website Name",
    "section": "",
    "text": "Banner text!"
  },
  {
    "objectID": "index.html#activity-instructions",
    "href": "index.html#activity-instructions",
    "title": "Website Name",
    "section": "Activity Instructions",
    "text": "Activity Instructions\n\nDocker\n\nSet up\n If not already installed, go here to install Docker, following the instructions for your particular operating system.  If you don’t have a Docker account create an account when prompted, or go here.  Start up Docker desktop by double clicking on the app. It may take some time to start up.\n\n\n\nGet workshop files\n Download the files for this activity clicking here: https://github.com/fhdsl/containers-for-scientists-sandbox/archive/refs/heads/main.zip   Put this file on your desktop so it is easily findable.  Double click the zip file (or right click and choose “unzip” or “decompress” to unzip the file.\n\n\n\nActivity 1: Pull and run a Docker image\nThis activity is built so that you will encounter errors that this guide will work you through! One of the most common container stumbling blocks is understanding the idea that containers are isolated from your computer.\n\nWhich means: If your computer has files, software, or anything else. Your container by default does NOT have it unless you do something to get those files and software on there.\n\nWe will encounter both an error when we don’t have a file we need AND an error when we don’t have a software package we need. We will guide you through what to do when these expected errors occur.\n\n\nStep 1: Docker pull\nWe need to get the Docker image we want to use. We do this by “pulling” it. Pulling is a term used in GitHub terminology too. It just means we’re taking something from the internet and getting a copy locally (on our computer). Pulling is basically like downloading.\n\n Run this command in your Terminal or Command Prompt window:\ndocker pull cansav09/practice-image:1\n\n\nStep 2: Check what images you have\n To see what images we have we can run docker image ls.  Alternatively, you can visit the Images tab of the docker desktop app.  We should see cansav09/practice-image:1 show up in the output.\n\n\n\nStep 3: Use the Run command to start a container from the image!\nRemember images can be shared easily but to actually use the stuff we need to turn our image into a container! To do that we will use the docker run command\n\n To launch the image for use, we can use docker run to turn it into a container.\ndocker run cansav09/practice-image:1\n Alternatively, we can press the play button for the image in images tab of the desktop app.\n To see what containers we have running we have we can run (in a new terminal session):\ndocker ps\n Alternatively, you can visit the Containers tab of the Docker Desktop app.\n\nPat yourself on the back! You have a running container!\n\nWhat can we do with running containers?\n\n\n\nStep 4: Run a single command\n To run stuff interactively from the command line we can do:\ndocker exec -it &lt;PUT_CONTAINER_ID_HERE&gt; bash\n You can find the CONTAINER ID in the containers tab of the desktop app or by using the docker container ls command in the terminal. Note that whereas the docker run command creates a new container from a docker image, the docker exec command executes a command inside an already running container. The -it option tells docker to execute the command interactively. In this case the actual command being specified is bash. Altogether the result is an interactive Bash shell inside the already running container.\nIf you run the above command you should see your terminal/command prompt now have the initial part change to something like:\nroot@e7b19cfb4461:/\nWhere you’ll noticed the CONTAINER ID is now shown there.\nYou are now using command line inside of your container. Trying running any bash command like ls to see what files are here for example.\nYour screen will end up looking like this (but this printout is from a Mac, windows will look a little different in some parts):\n(base) firstnamelastname@FirstNames-MacBook-Pro ~ % docker exec -it e7b19cfb4461 bash\n\nroot@e7b19cfb4461:/# ls\nbin   etc   lib    libexec  mnt   rocker_scripts  sbin  tmp\nboot  home  lib32  libx32   opt   root            srv   usr\ndev   init  lib64  media    proc  run             sys   var\nroot@e7b19cfb4461:/#\n When you are ready to leave your container type exit and press Enter.\n\n\nStep 5: Try calling a script\n Make sure you are in the unzipped workshop directory.  To run a script using the docker container we could just add reference to a script at the end.\ncd containers-for-scientists-sandbox-main\ndocker exec -it &lt;PUT_CONTAINER_ID_HERE&gt; bash run_analysis.sh\n\nBUT! You will find that this command won’t work yet though, why?\nbash: run_analysis.sh: No such file or directory\nQuestion: Does our container have all of the same files that our computer has?\n\nThis won’t work because the file run_analysis.sh is not a file that our container has. Docker containers do not have all the files that our computer does; they only have the files we add to it.\n\n\n\n\nPodman\n\nSet up Podman\n Go here to install Podman, following the instructions for your particular operating system.  Open up your command line.  Start up Podman by running the following:\npodman machine init\npodman machine start\n\n\nGet workshop files\n Download the files for this activity clicking here: https://github.com/fhdsl/containers-for-scientists-sandbox/archive/refs/heads/main.zip   Put this file on your desktop so it is easily findable.  Double click the zip file (or right click and choose “unzip” or “decompress” to unzip the file.\n\nThis activity is built so that you will encounter errors that this guide will work you through! Most common container stumbling block is understanding the idea that containers are isolated from your computer\n\nWhich means: If your computer has files, software, or anything else. Your container by default does NOT have it unless you do something to get those files and software on there.\n\nWe will encounter both an error of when we don’t have a file we need AND an error of when we don’t have a software package we need. We will guide you through what to do when these expected errors occur.\n\nStep 1: Podman pull\nWe need to get the image we want to use. We do this by “pulling” it. Pulling is a term used in GitHub terminology too. It just means we’re taking something from the internet and getting a copy locally (on our computer).\n\n Run this command in your Terminal or Command Prompt window:\npodman pull cansav09/practice-image:1\nIf this command is running properly you should see some output that looks like this:\n\n\n\nStep 2: Check what images you have\n To see what images we have we can run podman image ls.  You should see cansav09/practice-image:1 show up in the output and it will look a bit like this below:\ndocker.io/cansav09/practice-image  1   91619ca583b8  1 month ago  2.39 GB\n\n\nStep 3: Run the image to start a container!\nRemember images can be shared easily but to actually use the stuff we need to turn our image into a container! To do that we will do podman run\n\n To launch the image for use, we can use podman run to turn it into a container.\npodman run cansav09/practice-image:1\nIf this command has run properly it will return something like this:\n\nDon’t worry too much about all this output, every image is configured differently and this output will change depending on that.\n To see what containers we have running we have we can run:\npodman ps\nYour output will look a little like this. NOTE though that the CONTAINER ID and NAMES are randomly generated for each container and will change, so that part won’t be the same!\nCONTAINER ID  IMAGE                                COMMAND     CREATED        STATUS        PORTS       NAMES\ne7b19cfb4461  docker.io/cansav09/practice-image:1  /init       2 minutes ago  Up 2 minutes  8787/tcp    hopeful_proskuriakova\nPat yourself on the back! You have a running container!\n\nWhat can we do with running containers?\n\n\n\nStep 4: Run the container interactively\n To run stuff interactively from the command line we can do:\nBut you’ll need to replace the &lt;PUT_CONTAINER_ID_HERE&gt; portion of this command with the CONTAINER ID reported when you ran podman ps.\npodman exec -it &lt;PUT_CONTAINER_ID_HERE&gt; bash\nIf you run this you should see your terminal/command prompt now have the initial part change to something like:\nroot@e7b19cfb4461:/\nWhere you’ll noticed the CONTAINER ID is now shown there.\nYou are now using command line inside of your container. Trying running any bash command like ls to see what files are here for example.\nYour screen will end up looking like this:\n(base) firstnamelastname@FirstNames-MacBook-Pro ~ % podman exec -it e7b19cfb4461 bash\n\nroot@e7b19cfb4461:/# ls\nbin   etc   lib    libexec  mnt   rocker_scripts  sbin  tmp\nboot  home  lib32  libx32   opt   root            srv   usr\ndev   init  lib64  media    proc  run             sys   var\nroot@e7b19cfb4461:/#\n When you are ready to leave your container type exit and press Enter.\n\n\nStep 5: Try calling a script\n To run a script using the container we could just add reference to a script at the end:\npodman exec -it &lt;PUT_CONTAINER_ID_HERE&gt; bash run_analysis.sh\nBUT! You will find that this command won’t work yet though, why?\nThis won’t work because the file run_analysis.sh is not a file that our container has. Docker containers do not have all the files that our computer does; they only have the files we add to it.\nbash: run_analysis.sh: No such file or directory\nQuestion: Does our container have all of the same files that our computer has?\n\nThis won’t work because the file run_analysis.sh is not a file that our container has. Docker containers do not have all the files that our computer does; they only have the files we add to it."
  },
  {
    "objectID": "hosting.html",
    "href": "hosting.html",
    "title": "Hosting",
    "section": "",
    "text": "To host your website on GitHub, you will need to go to settings and click on the pages tab.\nAgain to go to settings click on the far upper right corner:\n\n\n\n\n\n\n\n\n\nClick on Pages:\n\n\n\n\n\n\n\n\n\nSelect the main branch and the root directory and press save. Be sure to also check the “Enforce HTTPS” box. Afterwards your repository should look like this:\n\n\n\n\n\n\n\n\n\nNote that in general, your website will be published to a URL like this:\nhttps://username.github.io/repository_name/\nIf you have multiple websites published underneath your username or organization, this should still publish fine. This website will be a subdirectory that is named whatever you have named this repository.\nIf you’ve published this website underneath a GitHub organization (not your own personal GitHub profile), then in the above example URL the organization name will be where we’ve put username.\nFor more about GitHub pages (including how to personalize your URL) see the GitHub pages documentation here: https://pages.github.com/\nSometimes, GitHub page publishing will take a bit of time. You can click on the Actions tab in your repository and see if there is a pages and deployment action currently running (indicated by a yellow circle next to the action name). If this is the case, you will need to wait until this becomes a green check mark before your GitHub page will be published."
  },
  {
    "objectID": "hosting.html#hosting-setup",
    "href": "hosting.html#hosting-setup",
    "title": "Hosting",
    "section": "",
    "text": "To host your website on GitHub, you will need to go to settings and click on the pages tab.\nAgain to go to settings click on the far upper right corner:\n\n\n\n\n\n\n\n\n\nClick on Pages:\n\n\n\n\n\n\n\n\n\nSelect the main branch and the root directory and press save. Be sure to also check the “Enforce HTTPS” box. Afterwards your repository should look like this:\n\n\n\n\n\n\n\n\n\nNote that in general, your website will be published to a URL like this:\nhttps://username.github.io/repository_name/\nIf you have multiple websites published underneath your username or organization, this should still publish fine. This website will be a subdirectory that is named whatever you have named this repository.\nIf you’ve published this website underneath a GitHub organization (not your own personal GitHub profile), then in the above example URL the organization name will be where we’ve put username.\nFor more about GitHub pages (including how to personalize your URL) see the GitHub pages documentation here: https://pages.github.com/\nSometimes, GitHub page publishing will take a bit of time. You can click on the Actions tab in your repository and see if there is a pages and deployment action currently running (indicated by a yellow circle next to the action name). If this is the case, you will need to wait until this becomes a green check mark before your GitHub page will be published."
  },
  {
    "objectID": "style.html",
    "href": "style.html",
    "title": "Style",
    "section": "",
    "text": "To change the part of the navigation bar that says “OTTR Quarto”, modify the title within the _quarto.yml file."
  },
  {
    "objectID": "style.html#navigation-bar",
    "href": "style.html#navigation-bar",
    "title": "Style",
    "section": "",
    "text": "To change the part of the navigation bar that says “OTTR Quarto”, modify the title within the _quarto.yml file."
  },
  {
    "objectID": "style.html#overall-theme",
    "href": "style.html#overall-theme",
    "title": "Style",
    "section": "Overall theme",
    "text": "Overall theme\nTo change the color scheme/fonts of the website modify the theme in the _site.yml file (see here for options):"
  },
  {
    "objectID": "style.html#change-the-favicon",
    "href": "style.html#change-the-favicon",
    "title": "Style",
    "section": "Change the favicon",
    "text": "Change the favicon\nThe small image that shows up on the browser can also be changed.\nYou can make a small image to replace the existing one by going to https://favicon.io/favicon-converter/ and uploading an image that you would like.\nNext, simply replace the image called favicon.ico in the images directory within the resources directory with the image you just created and downloaded from the favicon converter website."
  },
  {
    "objectID": "style.html#additional-changes",
    "href": "style.html#additional-changes",
    "title": "Style",
    "section": "Additional changes",
    "text": "Additional changes\nTo make additional changes to the style, you can modify the styles.css file with css code. This website has great information about css code.\nAs an example if you wanted to change the color of the blue line to green you could change where it says lightblue to lightgreen in the styles.css file. You can also use a hex color code like those that can be found at this website, such as #00FF9E to get a specific shade.\n\n\n\n\n\n\n\n\n\nNote that if you change the css file with a new element that is not already defined like body then you would need to do it as done with the banner element. This was then added to the index.Rmd file by using:\n&lt;div class = \"banner\"&gt;\nBanner text!  \n&lt;/div&gt;\nAlso checkout the Quarto docs for more customization of the pages."
  },
  {
    "objectID": "editing.html",
    "href": "editing.html",
    "title": "Editing",
    "section": "",
    "text": "Now that your website is alive and hosted, how do you start customizing it to have your content?\nIf you already know how to file pull requests, feel free to start making edits as you see fit using some of the structure points we’ve noted below.\nIf you are not familiar with pull requests, read this guide to get started."
  },
  {
    "objectID": "editing.html#title",
    "href": "editing.html#title",
    "title": "Editing",
    "section": "Title",
    "text": "Title\nTo change the title of the website, modify the name line of the _site.yml file."
  },
  {
    "objectID": "editing.html#modifying-pages",
    "href": "editing.html#modifying-pages",
    "title": "Editing",
    "section": "Modifying pages",
    "text": "Modifying pages\nPages are specified in the navigation bar by the lines that say -text: and href: .\nThe -text: specifies what the navigation bar will say for that tab.\nThe href: specifies which rendered Rmd file to use for that tab, it needs to be the html version of this file.\nThe tabs are specified to be aligned to the left (as specified by the left on line 5).\nThe tabs will appear in the order listed.\nYou can also add icons to these tabs using font awesome as is shown for the contact page on line 18.\n\n\n\n\n\n\n\n\n\nOther icon options include Bootstap glyphicons or ion icons. Note that not all icons will work because they are not all set up with the packages that make rendering the website possible, so this may require some trial and error. Here is an example of how you would use all of these icon options to add more:\n\n\n\n\n\n\n\n\n\nThis would result in a navigation bar with these icons:"
  }
]